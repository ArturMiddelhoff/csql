// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>Sqt.DbcProvider</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>ASCII</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Sqt.DbcProvider {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=false)]
    public partial class MruConnections : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Datasources> datasourcesField;
        
        /// <summary>
        /// MruConnections class constructor
        /// </summary>
        public MruConnections() {
            this.datasourcesField = new List<Datasources>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Datasources")]
        public List<Datasources> Datasources {
            get {
                return this.datasourcesField;
            }
            set {
                if ((this.datasourcesField != null)) {
                    if ((datasourcesField.Equals(value) != true)) {
                        this.datasourcesField = value;
                        this.OnPropertyChanged("Datasources");
                    }
                }
                else {
                    this.datasourcesField = value;
                    this.OnPropertyChanged("Datasources");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=true)]
    public partial class Datasources : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Datasource> datasourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ProviderType providerField;
        
        /// <summary>
        /// Datasources class constructor
        /// </summary>
        public Datasources() {
            this.datasourceField = new List<Datasource>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Datasource")]
        public List<Datasource> Datasource {
            get {
                return this.datasourceField;
            }
            set {
                if ((this.datasourceField != null)) {
                    if ((datasourceField.Equals(value) != true)) {
                        this.datasourceField = value;
                        this.OnPropertyChanged("Datasource");
                    }
                }
                else {
                    this.datasourceField = value;
                    this.OnPropertyChanged("Datasource");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProviderType Provider {
            get {
                return this.providerField;
            }
            set {
                if ((providerField.Equals(value) != true)) {
                    this.providerField = value;
                    this.OnPropertyChanged("Provider");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=true)]
    public partial class Datasource : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Authentication> authenticationsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> catalogsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commentField;
        
        public Datasource() {
            this.catalogsField = new List<string>();
            this.authenticationsField = new List<Authentication>();
            this.commentField = "";
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public List<Authentication> Authentications {
            get {
                return this.authenticationsField;
            }
            set {
                if ((this.authenticationsField != null)) {
                    if ((authenticationsField.Equals(value) != true)) {
                        this.authenticationsField = value;
                        this.OnPropertyChanged("Authentications");
                    }
                }
                else {
                    this.authenticationsField = value;
                    this.OnPropertyChanged("Authentications");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Catalog", IsNullable=false)]
        public List<string> Catalogs {
            get {
                return this.catalogsField;
            }
            set {
                if ((this.catalogsField != null)) {
                    if ((catalogsField.Equals(value) != true)) {
                        this.catalogsField = value;
                        this.OnPropertyChanged("Catalogs");
                    }
                }
                else {
                    this.catalogsField = value;
                    this.OnPropertyChanged("Catalogs");
                }
            }
        }
        
        /// <summary>
        /// e.g. the server/server instance  name
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Address {
            get {
                return this.addressField;
            }
            set {
                if ((this.addressField != null)) {
                    if ((addressField.Equals(value) != true)) {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }
        
        /// <summary>
        /// Just an user defined comment
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                if ((this.commentField != null)) {
                    if ((commentField.Equals(value) != true)) {
                        this.commentField = value;
                        this.OnPropertyChanged("Comment");
                    }
                }
                else {
                    this.commentField = value;
                    this.OnPropertyChanged("Comment");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=true)]
    public partial class Authentication : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool integratedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string userIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string passwordField;
        
        public Authentication() {
            this.integratedField = true;
            this.userIdField = "";
            this.passwordField = "";
        }
        
        /// <summary>
        /// Option to use integrated security/windows authentication.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Integrated {
            get {
                return this.integratedField;
            }
            set {
                if ((integratedField.Equals(value) != true)) {
                    this.integratedField = value;
                    this.OnPropertyChanged("Integrated");
                }
            }
        }
        
        /// <summary>
        /// The user id to use if login is done using the server authentication.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string UserId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField != null)) {
                    if ((userIdField.Equals(value) != true)) {
                        this.userIdField = value;
                        this.OnPropertyChanged("UserId");
                    }
                }
                else {
                    this.userIdField = value;
                    this.OnPropertyChanged("UserId");
                }
            }
        }
        
        /// <summary>
        /// The password to use if login is done using the server authentication.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                if ((this.passwordField != null)) {
                    if ((passwordField.Equals(value) != true)) {
                        this.passwordField = value;
                        this.OnPropertyChanged("Password");
                    }
                }
                else {
                    this.passwordField = value;
                    this.OnPropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=false)]
    public enum ProviderType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        MsSql,
        
        /// <remarks/>
        SqlCe,
        
        /// <remarks/>
        Sybase,
        
        /// <remarks/>
        Oracle,
        
        /// <remarks/>
        IbmDb2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=true)]
    public partial class Authentications : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Authentication> authenticationField;
        
        /// <summary>
        /// Authentications class constructor
        /// </summary>
        public Authentications() {
            this.authenticationField = new List<Authentication>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Authentication")]
        public List<Authentication> Authentication {
            get {
                return this.authenticationField;
            }
            set {
                if ((this.authenticationField != null)) {
                    if ((authenticationField.Equals(value) != true)) {
                        this.authenticationField = value;
                        this.OnPropertyChanged("Authentication");
                    }
                }
                else {
                    this.authenticationField = value;
                    this.OnPropertyChanged("Authentication");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.sql-service.de/etc/MruConnections.xsd", IsNullable=true)]
    public partial class Catalogs : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> catalogField;
        
        /// <summary>
        /// Catalogs class constructor
        /// </summary>
        public Catalogs() {
            this.catalogField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Catalog")]
        public List<string> Catalog {
            get {
                return this.catalogField;
            }
            set {
                if ((this.catalogField != null)) {
                    if ((catalogField.Equals(value) != true)) {
                        this.catalogField = value;
                        this.OnPropertyChanged("Catalog");
                    }
                }
                else {
                    this.catalogField = value;
                    this.OnPropertyChanged("Catalog");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
